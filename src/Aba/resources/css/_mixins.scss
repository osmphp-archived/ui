@import './_unit-conversions.scss';
@import "./_variables.scss";

/*-------------------------------------------------------------------*\
  #MIXINS-AND-FUNCTIONS
\*-------------------------------------------------------------------*/

$shadow-thickness: rem(0) rem(3px) rem(1px) rem(-2px) rgba(0, 0, 0, 0.2);
$shadow-ambient: rem(0) rem(0) rem(5px) rem(0) rgba(0, 0, 0, 0.1);

@function shadow($z-index) {
  @return rem(0) rem($z-index * 1px) rem($z-index * 2px) rem(0) rgba(0, 0, 0, 0.25),
          $shadow-ambient,
          $shadow-thickness;
}

@mixin placeholder-background($color) {
  background-image:
    linear-gradient(45deg, $color 25%, transparent 25%, transparent 75%,
            $color 75%, $color),
    linear-gradient(45deg, $color 25%, transparent 25%, transparent 75%,
            $color 75%, $color);
  background-size: 16px 16px;
  background-position: 0 0, 8px 8px;
}

@mixin no-list-formatting() {
  list-style: none;
  padding: 0;
  margin: 0;
}

@mixin dont-handle-mouse-events() {
  pointer-events: none;
  cursor: default;
}

@mixin remove-blue-highlight-rectangle-on-touch() {
  -webkit-tap-highlight-color: transparent;
}

@function prefixed-selector($selector, $prefix) {
  @if str-length($selector) == 0 {
    @return $selector;
  }

  $result: "";
  $pos: str-index($selector, " ");

  @while $pos {
    $result: $result + $prefix + str-slice($selector, 1, $pos - 1);

    $selector: str-slice($selector, $pos + 1);
    $pos: str-index($selector, " ");
  }

  $result: $result + $prefix + $selector;

  @return $result;
}

@function bg($selector: "") {
  @for $i from 1 through length($bg-colors) {
    $bg: nth($bg-colors, $i);
    @if nth($bg, 1) == $selector {
      @return $bg;
    }
  }

  @return null;
}

@function fg($selector: "") {
  @for $i from 1 through length($fg-colors) {
    $fg: nth($fg-colors, $i);
    @if nth($fg, 1) == $selector {
      @return $fg;
    }
  }

  @return null;
}

@function bg-color($bg: null) {
  $bg: if($bg != null, $bg, bg(""));
  @return nth($bg, 3);
}

@function dark($color) {
  @return lightness($color) < 40;
}

@function fg-default-color($bg, $fg) {
  @return if(dark(bg-color($bg)), nth($fg, 4), nth($fg, 3));
}

@function fg-emotion-color($bg, $fg) {
  $type: nth($bg, 2);

  @if ($type == "emotion") {
    @return null;
  }

  @return fg-default-color($bg, $fg);

}

@function fg-brand-color($bg, $fg) {
  $type: nth($bg, 2);
  $selector: nth($fg, 1);
  $default-fg: fg("");

  @if ($type == "emotion") {
    @return null;
  }

  @if ($type == "brand") {
    @return null;
  }

  $brand-bg: bg($selector);
  $dark-background: dark(bg-color($bg));
  @if $dark-background != dark(bg-color($brand-bg)) {
    @return bg-color($brand-bg);
  }

  // remove color variation from the selector
  $variation-pos: str-index($selector, "-");
  $selector: if($variation-pos,
    str-slice($selector, 1, $variation-pos - 1),
    $selector);

  @if $dark-background {
    // find the darkest possible light color variation. Since variation of the
    // same color always go from the lightest in $bg-colors, iterate
    // from the end of the array
    $i: length($bg-colors);
    @while ($i >= 1) {
      $brand-bg: nth($bg-colors, $i);
      @if str-index(nth($brand-bg, 1), $selector) == 1 and
        $dark-background != dark(bg-color($brand-bg))
      {
        @return bg-color($brand-bg);
      }

      $i: $i - 1;
    }
  }
  @else {
    // find the lightest possible dark color variation. Since variation of the
    // same color always go from the lightest in $bg-colors, iterate
    // from the beginning of the array
    @for $i from 1 through length($bg-colors) {
      $brand-bg: nth($bg-colors, $i);
      @if str-index(nth($brand-bg, 1), $selector) == 1 and
        $dark-background != dark(bg-color($brand-bg))
      {
        @return bg-color($brand-bg);
      }
    }
  }

  @return fg-default-color($bg, $default-fg);
}

@function fg-highlighted-color($bg: null, $fg: null) {
  $bg: if($bg != null, $bg, bg(""));
  $fg: if($fg != null, $fg, fg(""));
  $bg-color: bg-color($bg);
  $fg-color: fg-color($bg, $fg);

  @return mix($bg-color, $fg-color, 93);
}

@function fg-pressed-color($bg: null, $fg: null) {
  $bg: if($bg != null, $bg, bg(""));
  $fg: if($fg != null, $fg, fg(""));
  $bg-color: bg-color($bg);
  $fg-color: fg-color($bg, $fg);

  @return mix($bg-color, $fg-color, 87);
}

@function fg-delimiter-color($bg: null) {
  $bg: if($bg != null, $bg, bg(""));
  $fg: fg("");
  $bg-color: bg-color($bg);
  $fg-color: fg-color($bg, $fg);

  @return mix($bg-color, $fg-color, 80);
}

@function fg-color($bg: null, $fg: null) {
  $bg: if($bg != null, $bg, bg(""));
  $fg: if($fg != null, $fg, fg(""));
  $type: nth($fg, 2);
  $selector: nth($fg, 1);

  @if ($type == "brand") {
    @return fg-brand-color($bg, $fg);
  }
  @if ($type == "emotion") {
    @return fg-emotion-color($bg, $fg);
  }

  @return fg-default-color($bg, $fg);
}

//@function _bg($bg) {
//  $selector: prefixed-selector(nth($bg, 1), ".-on-");
//  @return if(str-length($selector) != 0, $selector, ".-on-neutral");
//}
//
//@function _fg($fg) {
//  $selector: prefixed-selector(nth($fg, 1), ".-");
//  @return if(str-length($selector) != 0, $selector, ".-neutral");
//}
//

@function str-replace($string, $search, $replace: '') {
  $index: str-index($string, $search);
  @if $index {
    @return str-slice($string, 1, $index - 1) + $replace +
      str-replace(str-slice($string, $index + str-length($search)), $search, $replace);
  }
  @return $string;
}

@mixin fg($selector: "", $bg: null, $fg: null) {
  // request info about the background and foreground colors
  $bg: if($bg != null, $bg, bg(""));
  $fg: if($fg != null, $fg, fg(""));

  // ".-{color}" CSS selector
  $fg-selector: prefixed-selector(nth($bg, 1), ".-");
  $fg-selector: if(str-length($fg-selector) != 0, $fg-selector, ".-neutral");
}

@function bg-type-is($bg, $type) {
  @return $type == null or nth($bg, 2) == $type;
}

//$block: null;
//@mixin block() {
//  $block: & !global;
//
//  @content;
//
//  $block: null !global;
//}

@mixin foreach-background($type: null) {
  @if & and bg-type-is(bg(""), $type) {
    // render default background rule only if inside some rule AND
    // the default background matches the type filter
    @content(bg(""));
  }

  @each $bg in $bg-colors {
    @if bg-type-is($bg, $type) {
      // render $bg background if it matches the type filter
      @at-root #{bg-selector($bg)} {
        @content($bg);
      }
    }
  }
}

@function bg-selector($bg: null) {
  $bg: if($bg != null, $bg, bg(""));
  $bg-selector: prefixed-selector(nth($bg, 1), ".-on-");
  $bg-selector: if(str-length($bg-selector) != 0, $bg-selector, ".-on-neutral");

  $result: ();
  @if & {
    @each $parent in & {
      // .-on-{color} {parent} {}
      //$result: append($result, "#{$bg-selector} #{inspect($parent)}", comma);

      // {parent[1]}.-on-{color} {parent[2...]} {}
      $same: set-nth($parent, 1, nth($parent, 1) + $bg-selector);
      $result: append($result, inspect($same), comma);
    }
  }
  @else { // if called outside of any CSS rule
    // .-on-{color} {}
    $result: append($result, $bg-selector, comma);
  }

  @return $result;
}

@mixin foreach-foreground($bg: null) {
  $bg: if($bg != null, $bg, bg(""));

  @if & {
    // render default foreground rule only if inside some rule
    @content($bg, fg(""));
  }

  @each $fg in $fg-colors {
    @if fg-color($bg, $fg) {
      // render $fg foreground on $bg background (if applicable)
      @at-root #{fg-selector($fg)} {
        @content($bg, $fg);
      }
    }
  }
}

@function fg-selector($fg: null) {
  $fg: if($fg != null, $fg, fg(""));
  $fg-selector: prefixed-selector(nth($fg, 1), ".-");
  $fg-selector: if(str-length($fg-selector) != 0, $fg-selector, ".-neutral");

  $result: ();
  @if & {
    @each $parent in & {
      // .-{color} {parent} {}
      //$result: append($result, "#{$fg-selector} #{inspect($parent)}", comma);

      // {parent[1]}.-{color} {parent[2...]} {}
      $same: set-nth($parent, 1, nth($parent, 1) + $fg-selector);
      $result: append($result, inspect($same), comma);

      // {parent} .-{color} {}
      //$child: append($parent, unquote($fg-selector));
      //$result: append($result, inspect($child), comma);
    }
  }
  @else { // if called outside of any CSS rule
    // .-{color} { ... } rules
    $result: append($result, $fg-selector, comma);
  }

  @return $result;
}
